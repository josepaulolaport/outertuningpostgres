#!/bin/bash

echo '##### USER: (system) ##### PASS: ('$ORACLE_PASSWORD') ##### DB: ('$ORACLE_SID')';

# Set Oracle environment variables
export ORACLE_SID=XE
export ORAENV_ASK=NO
. /usr/local/bin/oraenv

# Define Oracle credentials
ORACLE_USER="system"
ORACLE_PASS="oracle"
ORACLE_CONN_STRING="//localhost:1521/XE"

# Execute the SQL script
sqlplus -s "${ORACLE_USER}/${ORACLE_PASS}@${ORACLE_CONN_STRING}" <<EOF

SET ECHO ON;
SET FEEDBACK ON;
SET SERVEROUTPUT ON;
SET LINESIZE 200;

-- Drop existing tables
BEGIN
    FOR rec IN (SELECT table_name FROM user_tables WHERE table_name IN ('GENERAL_LOG', 'NATION', 'REGION', 'PART', 'SUPPLIER', 'PARTSUPP', 'CUSTOMER', 'ORDERS', 'LINEITEM', 'MATVIEWS')) LOOP
        EXECUTE IMMEDIATE 'DROP TABLE ' || rec.table_name || ' CASCADE CONSTRAINTS';
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        NULL; -- Ignore errors if tables do not exist
END;
/

-- Create tables
CREATE TABLE GENERAL_LOG (
    LOG_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EVENT_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    USER_NAME VARCHAR2(100),
    DATABASE_NAME VARCHAR2(100),
    QUERY CLOB,
    CLIENT_ADDR VARCHAR2(100)
);

CREATE TABLE NATION (
    N_NATIONKEY NUMBER PRIMARY KEY,
    N_NAME CHAR(25) NOT NULL,
    N_REGIONKEY NUMBER NOT NULL,
    N_COMMENT VARCHAR2(152)
);

CREATE TABLE REGION (
    R_REGIONKEY NUMBER PRIMARY KEY,
    R_NAME CHAR(25) NOT NULL,
    R_COMMENT VARCHAR2(152)
);

CREATE TABLE PART (
    P_PARTKEY NUMBER PRIMARY KEY,
    P_NAME VARCHAR2(55) NOT NULL,
    P_MFGR CHAR(25) NOT NULL,
    P_BRAND CHAR(10) NOT NULL,
    P_TYPE VARCHAR2(25) NOT NULL,
    P_SIZE NUMBER NOT NULL,
    P_CONTAINER CHAR(10) NOT NULL,
    P_RETAILPRICE NUMBER(15,2) NOT NULL,
    P_COMMENT VARCHAR2(23) NOT NULL
);

CREATE TABLE SUPPLIER (
    S_SUPPKEY NUMBER PRIMARY KEY,
    S_NAME CHAR(25) NOT NULL,
    S_ADDRESS VARCHAR2(40) NOT NULL,
    S_NATIONKEY NUMBER NOT NULL,
    S_PHONE CHAR(15) NOT NULL,
    S_ACCTBAL NUMBER(15,2) NOT NULL,
    S_COMMENT VARCHAR2(101) NOT NULL
);

CREATE TABLE PARTSUPP (
    PS_PARTKEY NUMBER NOT NULL,
    PS_SUPPKEY NUMBER NOT NULL,
    PS_AVAILQTY NUMBER NOT NULL,
    PS_SUPPLYCOST NUMBER(15,2) NOT NULL,
    PS_COMMENT VARCHAR2(199) NOT NULL,
    PRIMARY KEY (PS_PARTKEY, PS_SUPPKEY)
);

CREATE TABLE CUSTOMER (
    C_CUSTKEY NUMBER PRIMARY KEY,
    C_NAME VARCHAR2(25) NOT NULL,
    C_ADDRESS VARCHAR2(40) NOT NULL,
    C_NATIONKEY NUMBER NOT NULL,
    C_PHONE CHAR(15) NOT NULL,
    C_ACCTBAL NUMBER(15,2) NOT NULL,
    C_MKTSEGMENT CHAR(10) NOT NULL,
    C_COMMENT VARCHAR2(117) NOT NULL
);

CREATE TABLE ORDERS (
    O_ORDERKEY NUMBER PRIMARY KEY,
    O_CUSTKEY NUMBER NOT NULL,
    O_ORDERSTATUS CHAR(1) NOT NULL,
    O_TOTALPRICE NUMBER(15,2) NOT NULL,
    O_ORDERDATE DATE NOT NULL,
    O_ORDERPRIORITY CHAR(15) NOT NULL,
    O_CLERK CHAR(15) NOT NULL,
    O_SHIPPRIORITY NUMBER NOT NULL,
    O_COMMENT VARCHAR2(79) NOT NULL
);

CREATE TABLE LINEITEM (
    L_ORDERKEY NUMBER NOT NULL,
    L_PARTKEY NUMBER NOT NULL,
    L_SUPPKEY NUMBER NOT NULL,
    L_LINENUMBER NUMBER NOT NULL,
    L_QUANTITY NUMBER(15,2) NOT NULL,
    L_EXTENDEDPRICE NUMBER(15,2) NOT NULL,
    L_DISCOUNT NUMBER(15,2) NOT NULL,
    L_TAX NUMBER(15,2) NOT NULL,
    L_RETURNFLAG CHAR(1) NOT NULL,
    L_LINESTATUS CHAR(1) NOT NULL,
    L_SHIPDATE DATE NOT NULL,
    L_COMMITDATE DATE NOT NULL,
    L_RECEIPTDATE DATE NOT NULL,
    L_SHIPINSTRUCT CHAR(25) NOT NULL,
    L_SHIPMODE CHAR(10) NOT NULL,
    L_COMMENT VARCHAR2(44) NOT NULL,
    PRIMARY KEY (L_ORDERKEY, L_LINENUMBER)
);

CREATE TABLE MATVIEWS (
    MV VARCHAR2(64) PRIMARY KEY,
    VIEW_NAME VARCHAR2(64) NOT NULL,
    LAST_REFRESH TIMESTAMP,
    REFRESH_TIME NUMBER
);

-- Gather statistics
BEGIN
    DBMS_STATS.GATHER_SCHEMA_STATS(USER);
END;
/

-- Create PL/SQL procedures and functions for materialized views

-- Procedure to create a materialized view
CREATE OR REPLACE PROCEDURE CREATE_MATVIEW(matview IN VARCHAR2, view_name IN VARCHAR2) AS
    time_start TIMESTAMP;
    time_stop TIMESTAMP;
BEGIN
    DECLARE
        cnt NUMBER;
    BEGIN
        SELECT COUNT(*) INTO cnt FROM user_objects WHERE object_name = UPPER(matview);
        IF cnt > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR! A materialized view or table with that name already exists. Will not proceed');
        END IF;
    END;

    time_start := SYSTIMESTAMP;
    EXECUTE IMMEDIATE 'CREATE MATERIALIZED VIEW ' || matview || ' AS SELECT * FROM ' || view_name;
    time_stop := SYSTIMESTAMP;

    INSERT INTO MATVIEWS (MV, VIEW_NAME, LAST_REFRESH, REFRESH_TIME)
    VALUES (matview, view_name, time_start, EXTRACT(SECOND FROM (time_stop - time_start)));

    DBMS_OUTPUT.PUT_LINE('Materialized view created successfully');
END;
/

-- Procedure to refresh a materialized view
CREATE OR REPLACE PROCEDURE REFRESH_MATVIEW(matview IN VARCHAR2) AS
    time_start TIMESTAMP;
    time_stop TIMESTAMP;
    view_name VARCHAR2(64);
BEGIN
    SELECT VIEW_NAME INTO view_name FROM MATVIEWS WHERE MV = matview;

    IF view_name IS NULL THEN
        RAISE_APPLICATION_ERROR(-20002, 'ERROR! A materialized view with that name does not exist, will not proceed');
    END IF;

    time_start := SYSTIMESTAMP;
    EXECUTE IMMEDIATE 'REFRESH MATERIALIZED VIEW ' || matview;
    time_stop := SYSTIMESTAMP;

    UPDATE MATVIEWS
    SET LAST_REFRESH = time_start,
        REFRESH_TIME = EXTRACT(SECOND FROM (time_stop - time_start))
    WHERE MV = matview;

    DBMS_OUTPUT.PUT_LINE('Materialized view refreshed successfully');
END;
/

-- Procedure to drop a materialized view
CREATE OR REPLACE PROCEDURE DROP_MATVIEW(matview IN VARCHAR2) AS
BEGIN
    DECLARE
        cnt NUMBER;
    BEGIN
        SELECT COUNT(*) INTO cnt FROM MATVIEWS WHERE MV = matview;
        IF cnt = 0 THEN
            RAISE_APPLICATION_ERROR(-20003, 'ERROR! A materialized view with that name does not exist, will not proceed');
        END IF;
    END;

    EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW ' || matview;
    DELETE FROM MATVIEWS WHERE MV = matview;

    DBMS_OUTPUT.PUT_LINE('Materialized view dropped successfully');
END;
/

-- Procedure to refresh all materialized views
CREATE OR REPLACE PROCEDURE REFRESH_ALL_MATVIEWS AS
BEGIN
    FOR rec IN (SELECT MV FROM MATVIEWS) LOOP
        REFRESH_MATVIEW(rec.MV);
    END LOOP;
END;
/

EOF

# Data Loading using SQL*Loader

# Generate control files and load data for each table
for table in NATION REGION PART SUPPLIER PARTSUPP CUSTOMER ORDERS LINEITEM; do

cat > ${table}.ctl <<EOL
OPTIONS (DIRECT=TRUE)
LOAD DATA
INFILE '/opt/${table,,}.tbl'
INTO TABLE ${table}
APPEND
FIELDS TERMINATED BY '|'
(
EOL

# Add column definitions to control file
sqlplus -s "${ORACLE_USER}/${ORACLE_PASS}@${ORACLE_CONN_STRING}" <<SQL > columns.txt
SET HEADING OFF;
SET FEEDBACK OFF;
SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = UPPER('${table}') ORDER BY COLUMN_ID;
SQL

awk '{print $1 ","}' columns.txt >> ${table}.ctl
sed -i '$ s/,$//' ${table}.ctl
echo ")" >> ${table}.ctl

# Run SQL*Loader
sqlldr userid=${ORACLE_USER}/${ORACLE_PASS}@${ORACLE_CONN_STRING} control=${table}.ctl log=${table}.log

done

echo "Database setup complete. Materialized view procedures are ready."
